<project default="filtering" basedir=".">
	
	<property name="input.dir" value="models/input"/>
	<property name="normalization.dir" value="models/normalization"/>
	<property name="filtering.dir" value="models/filtering"/>
	<property name="petrinet.dir" value="models/filtered2pn"/>
	<property name="sc.dir" value="models/pn2sc"/>
		
	<property name="bpmn_inputfile" value="${input.dir}/Preprocessing_with_DataObjects_WithNoIO.bpmn2"/>
	<basename file="${bpmn_inputfile}" property="input_filename" suffix="bpmn2"/>			
	<property name="outputfile_normalized" value="${normalization.dir}/${input_filename}_normalized.pm"/>
	<property name="outputfile_filtered" value="${filtering.dir}/${input_filename}_filtered.pm"/>
	<property name="outputfile_petrinet" value="${petrinet.dir}/${input_filename}_2petrinet.pn"/>
	<property name="outputfile_sc" value="${sc.dir}/${input_filename}_2sc_hierarchy.sc"/>
	
	<!-- Prepare the BPMN model for processing with Epsilon --> 
	<target name="loadBPMNModel">
			
		<!-- epsilon.emf.register file="metamodels/BPMN20.ecore" /-->
		<epsilon.emf.loadModel
			name="bpmn_input"
			read="true"
			store="false"
			metamodeluri="http://www.omg.org/spec/BPMN/20100524/MODEL-XMI"
			modelfile="${bpmn_inputfile}"
		/>
		<!-- metamodelfile="metamodels/BPMN20.ecore" -->

	</target>
	
	<!-- First check that the BPMN is well-formed -->
	<target name="validate" depends="loadBPMNModel">
		<!-- Note that this task will fail if the model is not valid due to the failonerrors=true attribute. -->
		<epsilon.evl src="src/normalization/BPMN_Validation.evl" failonerrors="true">
			<model ref="bpmn_input" />
		</epsilon.evl>
	</target>
	
	<!-- Next prepare a new and empty preprocessed model for use in the Flock and EPL scripts -->
	<target name="loadMigrationModel">
		<epsilon.emf.register file="metamodels/BPMN2_Simplified.ecore" />
		<epsilon.emf.loadModel
			name="preprocessed"
			read="false"
			store="true"
			metamodeluri="http://BPMN/Simplified"
			modelfile="${outputfile_filtered}"
		/>
	</target>
	
		
	<!-- Invoke Flock to migrate and normalize the input bpmn, and then
	     invoke EPL to filter the process model -->
	<target name="normalization" depends="validate,loadMigrationModel">
		<epsilon.flock src="src/normalization/Preprocessing.mig" originalModel="Original" migratedModel="Migrated">
			<model ref="bpmn_input" as="Original"/>
			<model ref="preprocessed" as="Migrated"/>
		</epsilon.flock>
		
		<!-- Store the preprocessed file, just for checking -->
		<epsilon.storeModel model="preprocessed" target="${outputfile_normalized}"	/>
		<!-- copy tofile="models/output_preprocessed.pm" file="models/output_filtered.pm"/-->
	</target>	
		
	<target name="filtering" depends="normalization">
		<!-- Apply the Filtering rules -->
		<epsilon.epl src="src/filtering/filtering.epl" repeatWhileMatches="true">
			<model ref="preprocessed"/>
		</epsilon.epl>
	</target>	
		
	<target name="mapping2petrinet" depends="filtering">
		
		<epsilon.emf.register file="metamodels/PetriNets.ecore" />
		<epsilon.emf.loadModel
			name="petrinet"
			read="false"
			store="true"
			metamodeluri="http://uam.es/PetriNets"
			modelfile="${outputfile_petrinet}"
		/>

		<epsilon.flock src="src/petrinet_mapping/FilteredBPMN2PetriNet.mig" originalModel="Original" migratedModel="Migrated">
			<model ref="preprocessed" as="Original"/>
			<model ref="petrinet" as="Migrated"/>
		</epsilon.flock>
		
		<!-- Store the preprocessed file, just for checking -->
		<epsilon.storeModel model="preprocessed" target="${outputfile_petrinet}"	/>
		<!-- copy tofile="models/output_preprocessed.pm" file="models/output_filtered.pm"/-->
	</target>	
	
	<target name="pn2sc_initialization">
		<epsilon.emf.loadModel
					name="sc_initialization"
					read="false"
					store="true"
					metamodeluri="http://uam.es/StateCharts"
					modelfile="${outputfile_sc}"
				/>

				<epsilon.flock src="/ttc_pn2sc-master/example_solution/initialisation/PetriNet2StateChart.mig" originalModel="Original" migratedModel="Migrated">
					<model ref="preprocessed" as="Original"/>
					<model ref="sc_initialization" as="Migrated"/>
				</epsilon.flock>

	</target>
	
	<!-- Force Eclipse to refresh our project so we can see the newly generated files -->
	<!-- eclipse.refreshLocal resource="${basedir}" depth="infinite" /-->
</project>