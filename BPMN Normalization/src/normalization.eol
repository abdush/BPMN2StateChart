/* var i := 0;
for (leaf in Tree.all.select(t|t.children.isEmpty())) {
	var child : new Tree;
	i := i+1;
	child.label := 'Added' + i;
	leaf.children.add(child);
}

Model.store(Model.modelFile + 'copy.model');
*/
for (process in Process.all) {
	"Data Objects:".println();
	process.getAllDataObjects().println();
	"Data Objects References:".println();
	process.getAllDataObjectReferences().println();
	"All:".println();
	process.getAllObjectNodes().println();
	"Claim Object Nodes:".println();
	process.getObjectNodes("Order").println();
	"MultiState Objects:".println();
	process.getDataObjectsWithMultipleStates().println();
	"Stateful Object Nodes:".println();
	process.getStatefulDataObjects().println();
}
/* Helper functions */

operation Process getAllDataObjects(): Sequence(DataObject) {
	var dataObjects = DataObject.all.select(o| self.flowElements.includes(o));
	return dataObjects;
}

operation Process getAllDataObjectReferences(): Sequence(DataObjectReference) {
	var dataObjectReferences = DataObjectReference.all.select(o| self.flowElements.includes(o));
	return dataObjectReferences;
}

operation Process getAllObjectNodes(): Sequence(ItemAwareElement) {
	var dataObjects = self.getAllDataObjects();
	var dataObjectRefs = self.getAllDataObjectReferences();
	return dataObjects.includingAll(dataObjectRefs);
}

operation Process getDataObjectReferences(dataObject: DataObject): Sequence(DataObjectReference) {
	var dataObjectReferences = DataObjectReference.all.select(o|  o.dataObjectRef = dataObject and self.flowElements.includes(o));
	return dataObjectReferences;
}

operation Process getObjectNodes(objectName: String): Sequence(ItemAwareElement) {
	var objectNodes: new Sequence;
	var dataObject = DataObject.all.select(o| o.name = objectName and self.flowElements.includes(o)).first();
	objectNodes.add(dataObject);
	var dataObjectRefs = DataObjectReference.all.select(o| o.dataObjectRef = dataObject and self.flowElements.includes(o));
	objectNodes.addAll(dataObjectRefs);
	return objectNodes;
}
/*  
operation Process getDataObjectsWithMultipleStates() : Sequence(Sequence(DataObject)) {
	var result: new Sequence;
	var dataObjects = self.getAllDataObjects();
	for (dataObject in dataObjects) {
		var objectNodes = self.getObjectNodes(dataObject.name).select(o| o.dataState.isDefined());
		if (objectNodes.size >= 2) {
			var seq: new Sequence;
			seq.addAll(objectNodes);
			result.add(seq);
		}
	}
	return result;
}

*/

operation Process getDataObjectsWithMultipleStates() : Map {
	var result: new Map;
	var dataObjects = self.getAllDataObjects();
	for (dataObject in dataObjects) {
		var objectNodes = self.getObjectNodes(dataObject.name).select(o| o.dataState.isDefined());
		if (objectNodes.size >= 2) {
			var seq: new Sequence;
			seq.addAll(objectNodes);
			result.put(dataObject, seq);
		}
	}
	return result;
}

operation Process getStatefulDataObjects() : Map {
	var result: new Map;
	var dataObjectsMap = self.getDataObjectsWithMultipleStates();
	for (dataObject in dataObjectsMap.keySet()) {
		var objectNodes = dataObjectsMap.get(dataObject).select(o| o.isDataAssociationDefined());
		if (objectNodes.size >= 2) {
			var seq: new Sequence;
			seq.addAll(objectNodes);
			result.put(dataObject, seq);
		}	
	}
	return result;
}

operation ItemAwareElement isDataAssociationDefined(): Boolean {
	var dataOutputs = DataOutput.allInstances.select(o|o.outputSetRefs.isDefined());
	var	dataOutputAssociations = DataOutputAssociation.all.select(s|s.targetRef = self and s.sourceRef.exists(d| dataOutputs.includes(d)));
	var dataInputs = DataInput.allInstances.select(i|i.inputSetRefs.isDefined());
	var	dataInputAssociations = DataInputAssociation.all.select(s|s.sourceRef.includes(self) and dataInputs.includes(s.targetRef));
	return dataInputAssociations.size() >= 1 or dataOutputAssociations.size() >=1;
}
operation Process getDataInputs() : Sequence(DataObject) {
	var result: new Sequence;
	var dataObjects = self.getAllDataObjects();
	for (dataObject in dataObjects) {
		var objectNodes = self.getObjectNodes(dataObject.name).select(o| o.dataState.isDefined());
		if (objectNodes.size >= 2)
			result.addAll(objectNodes);	
	}
	return result;
}

operation Process getObjectNodesWithNoOutgoingEdge() : ItemAwareElement {

}

operation Process getObjectNodesWithNoIncomingEdge() : ItemAwareElement {

}

operation getActivitiesAssociatedWithObjectNode() : Sequence(FlowNode) {

}

operation getObjectNodesAssociatedWithActivity() : Sequence(ItemAwareElement) {

}

operation getActivitiesWithInputDataObjects() : Sequence(FlowNode) {
}

operation Process getActivitiesWithOutputDataObjects() : Sequence(FlowNode) {
}

operation Process getDataOutputsForObjectNode() : Sequence(DataOutput) {
	
	var dataOutputs = DataOutput.allInstances.select(o|o.outputSetRefs.isDefined());
	dataOutputs.println();
	var	dataOutputAssociations = DataOutputAssociation.all.select(s|s.targetRef = self and s.sourceRef.exists(d| dataOutputs.includes(d)));
}

operation process getDataOutputsForObjectNode() : Sequence(DataOutput) {

	var dataInputs = DataInput.allInstances.select(i|i.inputSetRefs.isDefined());
	dataInputs.println();
	var	dataInputAssociations = DataInputAssociation.all.select(s|s.sourceRef.includes(self) and dataInputs.includes(s.targetRef));
	
}
