/***************** Helper functions ****************/
var id : Integer = 0;
/*  
	Return the process that contains the given flow element.

operation FlowElement getContainingProcess() : Process {
	return Process.all.select(p| p.flowElements.includes(self)).first();
} 
*/ 
/* 
	Return a sequence of Activity nodes with more than one outgoing sequence flows (uncondition).
	Check no condition in the sequence flow??
*/
operation Process getActivitiesWithMultipleOutgoingControlFlow(): Sequence(Activity) {
	var activities = Activity.all.select(a| self.flowElements.includes(a) and a.outgoing.size() > 1);
	return activities;
}

/*
	Return a sequence of Activity nodes with more than one incoming sequence flows (uncondition).
	Check no condition in the sequence flow??
*/
operation Process getActivitiesWithMultipleIncomingControlFlow(): Sequence(Activity) {
	var activities = Activity.all.select(a| self.flowElements.includes(a) and a.incoming.size() > 1);
	return activities;
}

/*
	Get all the DataObject elements defined in this process.
*/
operation Process getAllDataObjects(): Sequence(DataObject) {
	var dataObjects = DataObject.all.select(o| self.flowElements.includes(o));
	return dataObjects;
}

/* 
	Get all the DataObjectReference elements defined in this process.
*/
operation Process getAllDataObjectReferences(): Sequence(DataObjectReference) {
	var dataObjectReferences = DataObjectReference.all.select(o| self.flowElements.includes(o));
	return dataObjectReferences;
}

/*
	Get all the DataObject & DataObjectReference elements defined in this process.
*/
operation Process getAllObjectNodes(): Sequence(ItemAwareElement) {
	var dataObjects = self.getAllDataObjects();
	var dataObjectRefs = self.getAllDataObjectReferences();
	return dataObjects.includingAll(dataObjectRefs);
}

/*
	Get all the DataObjectReference elements for the given DataObject defined in this process.
*/
operation Process getDataObjectReferences(dataObject: DataObject): Sequence(DataObjectReference) {
	var dataObjectReferences = DataObjectReference.all.select(o|  o.dataObjectRef = dataObject and self.flowElements.includes(o));
	return dataObjectReferences;
}

/* 
	Get the DataObject & DataObjectReference elements defined in this process for the given object name.
*/
operation Process getObjectNodes(objectName: String): Sequence(ItemAwareElement) {
	var objectNodes: new Sequence;
	var dataObject = DataObject.all.select(o| o.name = objectName and self.flowElements.includes(o)).first();
	objectNodes.add(dataObject);
	var dataObjectRefs = DataObjectReference.all.select(o| o.dataObjectRef = dataObject and self.flowElements.includes(o));
	objectNodes.addAll(dataObjectRefs);
	return objectNodes;
}

/*  
operation Process getDataObjectsWithMultipleStates() : Sequence(Sequence(DataObject)) {
	var result: new Sequence;
	var dataObjects = self.getAllDataObjects();
	for (dataObject in dataObjects) {
		var objectNodes = self.getObjectNodes(dataObject.name).select(o| o.dataState.isDefined());
		if (objectNodes.size >= 2) {
			var seq: new Sequence;
			seq.addAll(objectNodes);
			result.add(seq);
		}
	}
	return result;
}

*/

/* 
	Get all the DataObject & their DataObjectReference elements defined in this process where there is at least two data states defined.
	Return a Map of DataObject and a sequence of all object nodes for this data object.
*/
operation Process getDataObjectsWithMultipleStates() : Map {
	var result: new Map;
	var dataObjects = self.getAllDataObjects();
	for (dataObject in dataObjects) {
		var objectNodes = self.getObjectNodes(dataObject.name).select(o| o.dataState.isDefined());
		if (objectNodes.size >= 2) {
			var seq: new Sequence;
			seq.addAll(objectNodes);
			result.put(dataObject, seq);
		}
	}
	return result;
}

/*
	Get all the DataObject & their DataObjectReference elements defined in this process where there is at least two data states defined and the object node is connected to an Activity or Event.
	Return a Map of DataObject and a sequence of all object nodes for this data object.
*/
operation Process getStatefulDataObjects() : Map {
	var result: new Map;
	var dataObjectsMap = self.getDataObjectsWithMultipleStates();
	for (dataObject in dataObjectsMap.keySet()) {
		var objectNodes = dataObjectsMap.get(dataObject).select(o| o.isDataAssociationDefined());
		if (objectNodes.size >= 2) {
			var seq: new Sequence;
			seq.addAll(objectNodes);
			result.put(dataObject, seq);
		}	
	}
	return result;
}
/* 
	Check whether the DataObject/DataObjectReference node is connected to an Activity or Event.
*/
operation ItemAwareElement isDataAssociationDefined(): Boolean {
	return self.isDataOutputAssociationDefined() or self.isDataInputAssociationDefined();
}

/*
	Check whether the DataObject/DataObjectReference node is connected as data output to an Activity or Event.
*/
operation ItemAwareElement isDataOutputAssociationDefined(): Boolean {
	var dataOutputs = DataOutput.allInstances.select(o|o.outputSetRefs.isDefined());
	var	dataOutputAssociations = DataOutputAssociation.all.select(s|s.targetRef = self and s.sourceRef.exists(d| dataOutputs.includes(d)));
	return dataOutputAssociations.size() >=1;
}

/* 
	Check whether the DataObject/DataObjectReference node is connected as data input to an Activity or Event.
*/
operation ItemAwareElement isDataInputAssociationDefined(): Boolean {
	var dataInputs = DataInput.allInstances.select(i|i.inputSetRefs.isDefined());
	var	dataInputAssociations = DataInputAssociation.all.select(s|s.sourceRef.includes(self) and dataInputs.includes(s.targetRef));
	return dataInputAssociations.size() >= 1;
}

/* 
	Return a sequence of DataObject/DataObjectReference nodes with only incoming edges (connected as data output to an Activity or Event).
*/
operation Process getObjectNodesWithNoOutgoingEdge(dataObject: DataObject) : Sequence(ItemAwareElement) {
	var objectNodes = self.getStatefulDataObjects().get(dataObject);
	return objectNodes.select(o| not o.isDataInputAssociationDefined());
}

/*
	Return a sequence of DataObject/DataObjectReference nodes with only outgoing edges (connected as data input to an Activity or Event).
*/
operation Process getObjectNodesWithNoIncomingEdge(dataObject: DataObject) : Sequence(ItemAwareElement) {
	var objectNodes = self.getStatefulDataObjects().get(dataObject);
	return objectNodes.select(o| not o.isDataOutputAssociationDefined());
}

/* 
	Return a sequence of flow nodes (Activity & Event) that are associated as data input or output with the given object node.
*/
operation ItemAwareElement getActivitiesAssociatedWithObjectNode() : Sequence(FlowNode) {
	var flowNodes: new Sequence;
	
	var	dataInputAssociations = DataInputAssociation.all.select(s|s.sourceRef.includes(self) and s.targetRef.isDefined()); //and s.targetRef.isTypeOf(DataInput)
	var _dataInputs = DataInput.allInstances.select(i|i.inputSetRefs.isDefined() and dataInputAssociations.exists(d | d.targetRef = i));
	
	var	dataOutputAssociations = DataOutputAssociation.all.select(s|s.targetRef = self and s.sourceRef.isDefined()); //and s.sourceRef.isTypeOf(DataOutput)
	var _dataOutputs = DataOutput.allInstances.select(o| o.outputSetRefs.isDefined() and dataOutputAssociations.exists(d | d.sourceRef.includes(o)));
	
	var activities = Activity.all.select(a | a.ioSpecification.isDefined() and (not a.ioSpecification.dataInputs.excludesAll(_dataInputs) or not a.ioSpecification.dataOutputs.excludesAll(_dataOutputs))); //dataInputs or dataInput ??
	var throwEvents = ThrowEvent.all.select(e | e.dataInputs.isDefined() and not e.dataInputs.excludesAll(_dataInputs));
	var catchEvents = CatchEvent.all.select(e | e.dataOutputs.isDefined() and not e.dataOutputs.excludesAll(_dataOutputs));
	flowNodes.addAll(activities);
	flowNodes.addAll(throwEvents);
	flowNodes.addAll(catchEvents);
	return flowNodes;
}

/*
	Return a sequence of object nodes that are associated as data input or output with the given flow node.
*/
operation FlowNode _getAssociatedObjectNodes() : Sequence(ItemAwareElement) {
	self.println();
	if (self.isKindOf(Activity) or self.isKindOf(Event))
		return self.getAssociatedObjectNodes();
}

/* 
	Return a sequence of object nodes that are associated as data input with the given flow node.
*/
operation FlowNode _getIncomingObjectNodes() : Sequence(ItemAwareElement) {
	self.println();
	if (self.isKindOf(Activity) or self.isKindOf(Event))
		return self.getIncomingObjectNodes();
}

/*
	Return a sequence of object nodes that are associated as data output with the given flow node.
*/
operation FlowNode _getOutgoingObjectNodes() : Sequence(ItemAwareElement) {
	self.println();
	if (self.isKindOf(Activity) or self.isKindOf(Event))
		return self.getOutgoingObjectNodes();
}

/*
	Return a sequence of object nodes that are associated as data input with the given Activity.
*/
operation Activity getIncomingObjectNodes() : Sequence(ItemAwareElement) {
	
	var objectNodes: new Sequence;
	if (self.ioSpecification.isDefined() and self.ioSpecification.dataInputs.isDefined()) {
	var _dataInputs = self.ioSpecification.dataInputs;
	var	dataInputAssociations = DataInputAssociation.all.select(s| _dataInputs.includes(s.targetRef));
	var inputObjects = dataInputAssociations.collect(i | i.sourceRef);
	objectNodes.addAll(inputObjects);
	
	}
	
	return objectNodes;
}

/*
	Return a sequence of object nodes that are associated as data output with the given Activity.
*/
operation Activity getOutgoingObjectNodes() : Sequence(ItemAwareElement) {
	
	var objectNodes: new Sequence;
	if (self.ioSpecification.isDefined() and self.ioSpecification.dataOutputs.isDefined()) {
		var _dataOutputs = self.ioSpecification.dataOutputs;
		var	dataOutputAssociations = DataOutputAssociation.all.select(s| s.sourceRef.exists(d | _dataOutputs.includes(d)));
		var outputObjects = dataOutputAssociations.collect(i | i.targetRef);
		objectNodes.addAll(outputObjects);
	}
	return objectNodes;
}

/* 
	Return a sequence of object nodes that are associated as data input or output with the given Activity.
*/
operation Activity getAssociatedObjectNodes() : Sequence(ItemAwareElement) {
	
	var objectNodes: new Sequence;
	objectNodes.addAll(self.getIncomingObjectNodes());
	objectNodes.addAll(self.getOutgoingObjectNodes());
	return objectNodes;
}

/* 
	Return a sequence of object nodes that are associated as data input with the given Event.
*/
operation Event getIncomingObjectNodes() : Sequence(ItemAwareElement) {
	
	var objectNodes: new Sequence;
	if (self.isKindOf(ThrowEvent)) {
		var _dataInputs = self.dataInputs;
		var	dataInputAssociations = DataInputAssociation.all.select(s| _dataInputs.includes(s.targetRef));
		var inputObjects = dataInputAssociations.collect(i | i.sourceRef);
		objectNodes.addAll(inputObjects);
	} 
	return objectNodes;
}

/* 
	Return a sequence of object nodes that are associated as data output with the given Event.
*/
operation Event getOutgoingObjectNodes() : Sequence(ItemAwareElement) {
	
	var objectNodes: new Sequence;
	if (self.isKindOf(CatchEvent)) {
		var _dataOutputs = self.dataOutputs;
		var	dataOutputAssociations = DataOutputAssociation.all.select(s| s.sourceRef.exists(d | _dataOutputs.includes(d)));
		var outputObjects = dataOutputAssociations.collect(i | i.targetRef);
		objectNodes.addAll(outputObjects);
	}
	return objectNodes;
}

/* 
	Return a sequence of object nodes that are associated as data input or output with the given Event.
*/
operation Event getAssociatedObjectNodes() : Sequence(ItemAwareElement) {

	var objectNodes: new Sequence;
	objectNodes.addAll(self.getIncomingObjectNodes());
	objectNodes.addAll(self.getOutgoingObjectNodes());
	return objectNodes;
}

operation getActivitiesWithInputDataObjects() : Sequence(FlowNode) {
}

operation Process getActivitiesWithOutputDataObjects() : Sequence(FlowNode) {
}

operation Process getDataOutputsForObjectNode() : Sequence(DataOutput) {
	
	var dataOutputs = DataOutput.allInstances.select(o|o.outputSetRefs.isDefined());
	dataOutputs.println();
	var	dataOutputAssociations = DataOutputAssociation.all.select(s|s.targetRef = self and s.sourceRef.exists(d| dataOutputs.includes(d)));
}

operation process getDataOutputsForObjectNode() : Sequence(DataOutput) {

	var dataInputs = DataInput.allInstances.select(i|i.inputSetRefs.isDefined());
	dataInputs.println();
	var	dataInputAssociations = DataInputAssociation.all.select(s|s.sourceRef.includes(self) and dataInputs.includes(s.targetRef));
	
}

operation getNextElementSequenceId() : String {
	return "#FlowElement#".concat(id + 1);
}