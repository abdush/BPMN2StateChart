import "processable.eol";
import "or.eol";
import "and.eol";
import "cross_sync.eol";
import "refactoring.eol";

var current_processable_transitions = processable_transitions();
var i = 1;
var T3_Rule_applied = false;
var T3_applied_places = new Sequence(PN!Place);

while (current_processable_transitions.notEmpty()) {
	var reduced_a_transition_this_iteration = false;
	var reduction_result = null;
	var T3_Rule_result = null;
	i.println(current_processable_transitions);
	/*
	// ANDs
	for (processable in current_processable_transitions) {
		reduction_result = processable.applyAndRule();
		"inside AND For".println();
		if (reduction_result.get('a_transition_was_reduced?')) {
			// an transition has been successfully reduced, and
			// we need to recalculate the processable transitions
			"inside AND IF".println();
			reduced_a_transition_this_iteration = true;
			break;   
		}
	}
	
	// ORs
	for (processable in current_processable_transitions) {
		reduction_result = processable.applyOrRule();
		"inside OR For".println();
		if (reduction_result.get('a_transition_was_reduced?')) {
			// an transition has been successfully reduced, and
			// we need to recalculate the processable transitions
			"inside OR IF".println();
			reduced_a_transition_this_iteration = true;
			break;   
		}
	}
	*/ 
	
	for (processable in current_processable_transitions) {
		reduction_result = processable.reduce();
		if (reduction_result.get('a_transition_was_reduced?')) {
			// an transition has been successfully reduced, and
			// we need to recalculate the processable transitions
			reduced_a_transition_this_iteration = true;
			break;   
		}
	}
	
	if (reduced_a_transition_this_iteration) {
		// Update the set of processable transitions
		"inside While IF".println();
		current_processable_transitions = recompute_processable_transitions(current_processable_transitions, reduction_result.get('impacted_transitions'), reduction_result.get('deleted_transition'));
	} else {
		// No processable transition could be reduced, so fail with an error.
		"inside While Else".println();
		//current_processable_transitions.println('ERROR: None of the following processable transitions could be reduced: ');
		//break;
		
		//Try to apply T3
		T3_Rule_result = applyT3Rule();
		if (T3_Rule_result.get('a_place_was_reduced?')) {
			T3_Rule_applied = true;
			T3_applied_places.add(T3_Rule_result.get('impacted_place'));
		} else {
			// No processable transition could be reduced, so fail with an error.
			current_processable_transitions.println('ERROR: None of the following processable transitions could be reduced: ');
			abort;
			break;	
		}
	}
	i = i+1;
}

//Apply T2b Rule if T3 Rule applied
if (T3_Rule_applied) {
	//Apply RuleT2b
	applyT2bRule();
	
	//Apply Refactoring
	applyRefactoring(T3_applied_places);
	
}

operation Transition reduce() : Map {
	var and_result = self.applyAndRule();
	
	if (and_result.get('a_transition_was_reduced?')) {
		return and_result;
	
	} else {
		var or_result = self.applyOrRule();
		return or_result;
	}
}
