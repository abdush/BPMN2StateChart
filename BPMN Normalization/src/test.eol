--import "normalization.eol";

"Flow elements containing process:".println();
--for (flowElement in FlowElement.all)
--	flowElement.getContainingProcess().println();
		
for (process in Process.all) {
	"Multi incoming/outgoing activities:".println();
	process.getActivitiesWithMultipleOutgoingControlFlow().println();
	process.getActivitiesWithMultipleIncomingControlFlow().println();
	"Data Objects:".println();
	process.getAllDataObjects().println();
	"Data Objects References:".println();
	process.getAllDataObjectReferences().println();
	"All:".println();
	process.getAllObjectNodes().println();
	"Claim Object Nodes:".println();
	process.getObjectNodes("Order").println();
	"MultiState Objects:".println();
	process.getDataObjectsWithMultipleStates().println();
	"Stateful Object Nodes:".println();
	var statefulObjects = process.getStatefulDataObjects(); 
	statefulObjects.println();
	"No Incoming Edge".println();
	for (dataObject in statefulObjects.keySet())
		process.getObjectNodesWithNoIncomingEdge(dataObject).println();
	"No Outgoing Edge".println();
	for (dataObject in statefulObjects.keySet()) 
		process.getObjectNodesWithNoOutgoingEdge(dataObject).println();
	"Activities:".println();
	for (dataObject in statefulObjects.keySet()) 
		for (itemAwareElement in statefulObjects.get(dataObject))
			itemAwareElement.getActivitiesAssociatedWithObjectNode().println();
	
	"Flow Nodes object nodes:".println();
	for( flownode in FlowNode.all) {
		flownode._getAssociatedObjectNodes().println();
		flownode._getIncomingObjectNodes().println();
		flownode._getOutgoingObjectNodes().println();
	}
	/* 
	"Object Nodes for activity:".println();
	for(activity in Activity.all)
		activity.getAssociatedObjectNodes().println();
	"Object Nodes for Event:".println();
	for(event in Event.all)
		event.getAssociatedObjectNodes().println();
	*/
}


/* var i := 0;
for (leaf in Tree.all.select(t|t.children.isEmpty())) {
	var child : new Tree;
	i := i+1;
	child.label := 'Added' + i;
	leaf.children.add(child);
}

Model.store(Model.modelFile + 'copy.model');
*/


// In this script, we query Ecore to find out:

// ... how many classes it has
EClass.all.size().println("All classes: ");

// ... how many abstract classes it has
EClass.all.select(c|c.abstract)
    .size().println("Abstract classes: ");

// ... the names of its classes and how many 
// features each one has
"Class names: ".println();
for (c in EClass.all) {
    var toPrint = " " + c.name;
    toPrint = toPrint + "->" + 
        c.eStructuralFeatures.size();

    toPrint.println();
}


for (n in BPMN!Event.all) {
	n.id.println();
}
	
//definitions_id();

operation definitions_id () : String {
	var id = bpmn2!bpmn2::SequenceFlow.allInstances();
	id.println();
}
