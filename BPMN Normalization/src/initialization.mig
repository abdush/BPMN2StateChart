pre initializationStart {
	"Synthesizing phase (initialization) start:-------".println();
}

pre NoForkJoinEdge {
	Activity.all.size().println("Activity nodes set should be empty!");
	var edges = Edge.all.select(e | e.sourceRef.isTypeOf(ParallelGateway) and e.targetRef.isTypeOf(ParallelGateway));
	edges.size().println("Edges connecting forks/joins should be empty!");
	//add dummy object if not:
	
}
retype Process to Process
retype ParallelGateway to ParallelGateway

retype DataState to DataState

retype ObjectNode to ObjectNode
migrate ObjectNode
{
	original.println("Org: DataObject");
	migrated.println("Mig: ObjectNode");
	var newOR = new Migrated!ORNode;
	migrated.parent = newOR;
	migrated.dataState = original.dataState.equivalent();
}

retype ExclusiveGateway to ExclusiveGateway
migrate ExclusiveGateway
{
	original.println("Org: XOR");
	migrated.println("Mig: XOR");
	var newOR = new Migrated!ORNode;
	migrated.parent = newOR;
}

retype ObjectFlow to Edge
migrate ObjectFlow
{
	original.println("Org: DOA");
	migrated.println("Mig: ObjectFlow");
	
	migrated.targetRef = original.targetRef.equivalent().getParent();
	original.targetRef.println("Org: trgRef");
	migrated.targetRef.println("Mig: trgRef");
	
	migrated.sourceRef = original.sourceRef.equivalent().getParent();
	migrated.sourceRef.println("Mig: SrcRef");
	
	original.targetRef.getContainingProcess().equivalent().flowElements.add(migrated);
}

retype SequenceFlow to Edge
migrate SequenceFlow
{
	original.println("Org: DOA");
	migrated.println("Mig: ObjectFlow");
	
	migrated.targetRef = original.targetRef.equivalent().getParent();
	original.targetRef.println("Org: trgRef");
	migrated.targetRef.println("Mig: trgRef");
	
	migrated.sourceRef = original.sourceRef.equivalent().getParent();
	migrated.sourceRef.println("Mig: SrcRef");
	
	original.targetRef.getContainingProcess().equivalent().flowElements.add(migrated);
}

retype StartEvent to StartEvent
retype EndEvent to EndEvent
migrate Event 
{
	original.println("Org: Event");
	migrated.println("Mig: Event");
}

post test {
	Original!Process.all.first.flowElements.size().println();
	Migrated!Process.all.first.flowElements.size().println();
}

post initializationEnd {
	"initialization phase End:-------".println();
}

operation Migrated!Node getParent() : Migrated!Node {
	if (self.isTypeOf(Migrated!ParallelGateway))
		return self;
	else
		return self.parent;
}