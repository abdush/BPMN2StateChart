import "Normalization_Helper.eol";

/****************************************** Pre block **************************************************/
pre preprocessingStart {
	"Preprocessing phase start:-------".println();
	Process.all.size().println();
}

/******************************************* Migration ************************************************/
retype Process to Process
retype ParallelGateway to ParallelGateway
retype ExclusiveGateway to ExclusiveGateway
retype DataState to DataState

retype DataObject to ObjectNode
migrate DataObject
{
	original.println("Org: DataObject ");
	migrated.println("Mig: ObjectNode ");
	--migrated.name = migrated.name.concat(migrated.dataState.name);
	migrated.dataState = original.dataState.equivalent();
}

retype DataObjectReference to ObjectNode
migrate DataObjectReference
{
	original.println("Org: DataObjectRef ");
	migrated.println("Mig: ObjectNode ");
	--migrated.name = migrated.name.concat(migrated.dataState.name);
	migrated.dataState = original.dataState.equivalent();
}

retype DataOutputAssociation to ObjectFlow
migrate DataOutputAssociation
{
	original.println("Org: DOA ");
	migrated.println("Mig: ObjectFlow ");
	
	migrated.targetRef = original.targetRef.equivalent();
	original.targetRef.println("Org: trgRef ");
	migrated.targetRef.println("Mig: trgRef ");
	
	--original.getAssociatedFlowNode().equivalent().println("Org Eq: FlowNode");
	migrated.sourceRef = original.getAssociatedFlowNode().equivalent();
	migrated.sourceRef.println("Mig: SrcRef ");
	
	--original.targetRef.getContainingProcess().println("Org: Process ");
	--original.targetRef.getContainingProcess().equivalent().println("Org Eq: Process");
	--original.targetRef.getContainingProcess().equivalent().flowElements.println("Org Eq: flowElements");//add(migrated);
	
	-- Do We need to add this? Why not others!!??
	original.targetRef.getContainingProcess().equivalent().flowElements.add(migrated);
}


retype DataInputAssociation to ObjectFlow
migrate DataInputAssociation
{
	original.println("Org: DIO ");
	migrated.println("Mig: ObjectFlow ");
	
	migrated.targetRef = original.getAssociatedFlowNode().equivalent();
	migrated.sourceRef = original.sourceRef.first().equivalent();
	original.sourceRef.first().getContainingProcess().equivalent().flowElements.add(migrated);
}

retype SequenceFlow to SequenceFlow
migrate SequenceFlow 
{
	original.println();
	-- Why cannot use the below line!!??
	if (original.conditionExpression.isDefined() and original.conditionExpression.isTypeOf(FormalExpression)) 
	{	
		original.println("inside");
		var formal : FormalExpression =  original.conditionExpression;
		formal.println();
		migrated.`guard` =  formal.body;
	}	
}

retype Activity to Activity
migrate Activity 
{
	original.println("Org: Activity ");
	migrated.println("Mig: Activity ");
}
-- Intermediate Events !!??
retype StartEvent to StartEvent
retype EndEvent to EndEvent
migrate Event 
{
	original.println("Org: Event ");
	migrated.println("Mig: Event ");
}

/****************************************************** Post block: *************************************
1- Activity nodes with multiple incoming (outgoing) sequence flows handled by adding merge (fork). 
2- Object nodes with no incoming (outgoing) object flows handled by checking the unique activity node 
   associated with the object node and changing the sequence flow target (source), otherwise fail!!!.
3- Activity nodes with multiple incoming (outgoing) edges handled by adding join (fork).
*******************************************************************************************************/

post test {
	Original!Process.all.first.flowElements.size().println("Original Num of flow elements: ");
	Migrated!Process.all.first.flowElements.size().println("Migrated Num of flow elements: ");
}

-- For Activities with multiple outgoing sequence flows
post _addForkGateway {
	for(activityNode in Migrated!Activity.all.select(a | a.outgoing.select(e | e.isTypeOf(Migrated!SequenceFlow)).size() > 1)) {
 		activityNode._addFork();
 		"".println("Normalization Rule R1(a) applied. ");
 	}
 	
 	for(activityNode in Migrated!Event.all.select(a | a.outgoing.select(e | e.isTypeOf(Migrated!SequenceFlow)).size() > 1)) {
 		activityNode._addFork();
 		"".println("Normalization Rule R1(a) applied. ");
 	}
}

-- For Activities with multiple incoming sequence flows
post addMergeGateway {
	for(activityNode in Migrated!Activity.all.select(a | a.incoming.select(e | e.isTypeOf(Migrated!SequenceFlow)).size() > 1)) {
 		activityNode.addMerge();
 		"".println("Normalization Rule R1(b) applied. ");
 	}
 	
 	for(activityNode in Migrated!Event.all.select(a | a.incoming.select(e | e.isTypeOf(Migrated!SequenceFlow)).size() > 1)) {
 		activityNode.addMerge();
 		"".println("Normalization Rule R1(b) applied. ");
 	}
}

-- Object nodes with no outgoing flow.
post addOutputObjectFlow {
	for (objectNode in Migrated!ObjectNode.all.select(o | o.outgoing.isUndefined() or o.outgoing.size() = 0)) {
				
		if (objectNode.incoming.size() == 1) {
			//The unique activity node a to which o is output.
			var actionNode = objectNode.incoming.first().sourceRef;
			if (not actionNode.hasMultipleOutgoingObjectFlows()) {
				//There is a unique control flow from a
				var outgoingControlEdge = actionNode.outgoing.first();  
				outgoingControlEdge.sourceRef = objectNode;
				"".println("Normalization Rule R2(a) applied. ");
			} else {
				" : Object Node need to be fixed".println(objectNode.name + " " + objectNode.dataState.name);
				" : Node has multiple data outputs".println(actionNode.name); 
				throw "Node has multiple data outputs";
				//abort;
			}
		} else {
				" : Object Node need to be fixed (Output from multiple nodes.)".println(objectNode.name + " " + objectNode.dataState.name); 
				abort;
		}
	}
}

-- Object nodes with no incoming flow.
post addInputObjectFlow {
	for (objectNode in Migrated!ObjectNode.all.select(o | o.incoming.isUndefined() or o.incoming.size() = 0)) {
		
		if (objectNode.outgoing.size() == 1) {
			//The unique activity node a to which o is input.
			var actionNode = objectNode.outgoing.first().targetRef;
			if (not actionNode.hasMultipleIncomingObjectFlows()) {
				//There is a unique control flow to a
				var incomingControlEdge = actionNode.incoming.first();    
				incomingControlEdge.targetRef = objectNode;
				"".println("Normalization Rule R2(b) applied. ");
			} else {
				" : Object Node need to be fixed".println(objectNode.name + " " + objectNode.dataState.name);
				" : Node has multiple data inputs".println(actionNode.name); 
				abort;
			}
		} else {
				" : Object Node need to be fixed (Input to multiple nodes.)".println(objectNode.name + " " + objectNode.dataState.name); 
				abort;
		}
	}
}

-- For Activities with multiple incoming edges
post addJoinGateway {
 	for(activityNode in Migrated!FlowNode.all.select(n | (n.isTypeOf(Migrated!Activity) or n.isKindOf(Migrated!Event)) and n.incoming.size > 1)) {
 		activityNode.addJoin();
 		"".println("Normalization Rule R3(a) applied. ");
 	}
}

-- For Activities with multiple outgoing edges
post addForkGateway {
	for(activityNode in Migrated!FlowNode.all.select(n | (n.isTypeOf(Migrated!Activity) or n.isKindOf(Migrated!Event)) and n.outgoing.size > 1)) {
 		activityNode.addFork();
 		"".println("Normalization Rule R3(b) applied. ");
 	}	
} 

post preprocessingEnd {
	"Preprocessing phase End:-------".println();
}

/******************************************** Helper Functions ******************************************/
operation Original!Activity hasMultipleOutgoingControlFlows() : Boolean {
	return self.outgoing.size() > 1;
}

operation Migrated!FlowNode hasMultipleOutgoingObjectFlows() : Boolean {
	return  self.outgoing.select(e | e.isTypeOf(Migrated!ObjectFlow)).size() > 1;
}
operation Migrated!FlowNode hasMultipleIncomingObjectFlows() : Boolean { 
	return  self.incoming.select(e | e.isTypeOf(Migrated!ObjectFlow)).size() > 1;
}

operation Migrated!FlowNode hasMultipleObjectFlows() : Boolean { 
	return  hasMultipleOutgoingObjectFlows() or hasMultipleIncomingObjectFlows();
}

operation Original!FlowElement getContainingProcess() : Original!Process {
	return Original!Process.all.select(p| p.flowElements.includes(self)).first();
} 

operation Original!DataOutputAssociation getAssociatedFlowNode() : Original!FlowNode {
	-- Is this correct? choosing the first item!!??s
	var _dataOutput = self.sourceRef.first();
	var activity = Original!Activity.all.select(a | a.ioSpecification.isDefined() and a.ioSpecification.dataOutputs.includes(_dataOutput)).first();
	var catchEvent = Original!CatchEvent.all.select(e | e.dataOutputs.isDefined() and e.dataOutputs.includes(_dataOutput)).first();
	if (activity.isDefined())
		return activity;
	else
		return catchEvent;
}

operation Original!DataInputAssociation getAssociatedFlowNode() : Original!FlowNode {
	var _dataInput = self.targetRef;
	var activity = Original!Activity.all.select(a | a.ioSpecification.isDefined() and a.ioSpecification.dataInputs.includes(_dataInput)).first();
	var throwEvent = Original!ThrowEvent.all.select(e | e.dataInputs.isDefined() and e.dataInputs.includes(_dataInput)).first();
	if (activity.isDefined())
		return activity;
	else
		return throwEvent;
}

operation Migrated!FlowNode _addFork() : Boolean {
	
	var sequenceFlow: new Migrated!SequenceFlow;
	var fork: new Migrated!ParallelGateway;
						
	--Set a unique id for the gateway!!?? 
	sequenceFlow.id = "sequenceFlow".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(sequenceFlow);
	fork.id = "fork".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(fork);
					
	fork.gatewayDirection = Migrated!GatewayDirection#Diverging;
	fork.outgoing.addAll(self.outgoing.select(e| e.isTypeOf(Migrated!SequenceFlow)));
	sequenceFlow.sourceRef = self;
	sequenceFlow.targetRef = fork;
	fork.name = fork.outgoing.targetRef.collect(n | n.name).concat();
}

operation Migrated!FlowNode addMerge() : Boolean {
	var sequenceFlow: new Migrated!SequenceFlow;
	var merge: new Migrated!ExclusiveGateway;
					
	--Set a unique id for the gateway!!?? 
	sequenceFlow.id = "sequenceFlow".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(sequenceFlow);
	merge.id = "merge".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(merge);
					
	merge.gatewayDirection = Migrated!GatewayDirection#Converging;
	merge.incoming.addAll(self.incoming.select(e | e.isTypeOf(Migrated!SequenceFlow)));
	sequenceFlow.sourceRef = merge;
	sequenceFlow.targetRef = self;
	
	merge.name = merge.incoming.sourceRef.collect(n | n.name).concat();
}

operation Migrated!FlowNode addFork() : Boolean {
	
	var sequenceFlow: new Migrated!SequenceFlow;
	var fork: new Migrated!ParallelGateway;
					
	--Set a unique id for the gateway!!?? 
	sequenceFlow.id = "sequenceFlow".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(sequenceFlow);
	fork.id = "fork".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(fork);
					
	fork.gatewayDirection = Migrated!GatewayDirection#Diverging;
	fork.outgoing.addAll(self.outgoing);
	sequenceFlow.sourceRef = self;
	sequenceFlow.targetRef = fork;
	
	fork.name = fork.outgoing.targetRef.collect(n | n.name).concat();
}

operation Migrated!FlowNode addJoin() : Boolean {
	var sequenceFlow: new Migrated!SequenceFlow;
	var join: new Migrated!ParallelGateway;
					
	--Set a unique id for the gateway!!?? 
	sequenceFlow.id = "sequenceFlow".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(sequenceFlow);
	join.id = "join".concat(getNextElementSequenceId());
	Migrated!Process.all.first.flowElements.add(join);
					
	join.gatewayDirection = Migrated!GatewayDirection#Converging;
	join.incoming.addAll(self.incoming);
	sequenceFlow.sourceRef = join;
	sequenceFlow.targetRef = self;
	join.name = join.incoming.sourceRef.collect(n | n.name).concat();
}

operation getNextElementSequenceId() : String {
	var id = (Migrated!Process.all.first.flowElements.size() + 1).asString();
	return "#FlowElement#".concat(id);
}