/**
	The original process model is the filtered BPMN model generated after applying the filtering rules.
	Therefore, it should only contain object nodes, gateways and start & end events.
**/

pre PM2PNStart {
	"Mapping Filtered BPMN to Petri Net phase start:-------".println();
	Process.all.size().println();
}

pre PM2PNEnd {
	"Mapping Filtered BPMN to Petri Net phase End:-------".println();
	Process.all.size().println();
}

retype Process to Net

retype ObjectNode to Place
migrate ObjectNode {
	migrated.name = original.dataState.name;
	original.getContainingProcess().equivalent().places.add(migrated);
	original.println("Org ON: ");
	migrated.println("Mig ON: ");
}

retype StartEvent to Place
migrate StartEvent {
	original.getContainingProcess().equivalent().places.add(migrated);
	original.println("Org Start: ");
	migrated.println("Mig Place: ");
}

retype EndEvent to Place
migrate EndEvent {
	
	original.getContainingProcess().equivalent().places.add(migrated);
	original.println("Org End: ");
	migrated.println("Mig Place: ");
}

--retype Activity to Transition

retype ExclusiveGateway to Place
migrate ExclusiveGateway {
	original.getContainingProcess().equivalent().places.add(migrated);
	original.println("Org XOR: ");
	migrated.println("Mig Place: ");
}

retype ParallelGateway to Transition
migrate ParallelGateway {
	original.getContainingProcess().equivalent().transitions.add(migrated);
	original.println("Org AND: ");
	migrated.println("Mig Trans: ");
}

--retype Edge to Place
migrate Edge {
	
	var srcNode = original.sourceRef.equivalent();
	var tgtNode = original.targetRef.equivalent(); 
		if (srcNode.isTypeOf(Migrated!Place)) {
			if (tgtNode.isTypeOf(Migrated!Place)) {
				-- add Dummy Transition
				var postt = new Migrated!Transition;
				original.getContainingProcess().equivalent().transitions.add(postt);
				postt.postp.add(tgtNode);
				srcNode.postt.add(postt);
			} else {
				srcNode.postt.add(tgtNode);
			}
		} else {
			if (tgtNode.isTypeOf(Migrated!Transition)) {
				-- add Dummy Place
				var postp = new Migrated!Place;
				original.getContainingProcess().equivalent().places.add(postp);
				postp.postt.add(tgtNode);
				srcNode.postp.add(postp);
			} else {
				srcNode.postp.add(tgtNode);
			}		
		}
	original.println("Org Seq: ");
	migrated.println("Mig Seq: ");
}

/*************************************** helper functions ******************************************/
operation Original!FlowElement getContainingProcess() : Original!Process {
	return Original!Process.all.select(p| p.flowElements.includes(self)).first();
} 
